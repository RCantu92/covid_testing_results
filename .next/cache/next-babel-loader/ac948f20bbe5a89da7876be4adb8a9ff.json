{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/robertocantu/blockchain_programming/covid_testing_results/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Card, Form, Button, Input, Message } from 'semantic-ui-react';\nimport covidTesting from '../back-end/covidTesting.js';\nimport web3 from '../back-end/web3.js';\n\nvar CovidTesting = /*#__PURE__*/function (_Component) {\n  _inherits(CovidTesting, _Component);\n\n  var _super = _createSuper(CovidTesting);\n\n  function CovidTesting() {\n    var _this;\n\n    _classCallCheck(this, CovidTesting);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      govntId: '',\n      isCivillianTested: '',\n      licenseNum: '',\n      isHealthcareProfQualified: '',\n      errorMessage: '',\n      loading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmitCivillian\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var accounts, isCivillianTested;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Browser from trying to\n                // submit the form\n                event.preventDefault();\n\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context.prev = 2;\n                _context.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context.sent;\n                _context.next = 8;\n                return covidTesting.methods.isCivillianTested(_this.state.govntId).call();\n\n              case 8:\n                isCivillianTested = _context.sent;\n\n                _this.setState({\n                  isCivillianTested: isCivillianTested[0]\n                }); // console.log(this.state.isCivillianTested.toString());\n\n\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](2);\n\n                _this.setState({\n                  errorMessage: _context.t0.message\n                });\n\n              case 15:\n                _this.setState({\n                  loading: false\n                });\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 12]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmitHealthcareProf\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n        var accounts, isHealthcareProfQualified;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Browser from trying to\n                // submit the form\n                event.preventDefault();\n\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context2.prev = 2;\n                _context2.next = 5;\n                return web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context2.sent;\n                _context2.next = 8;\n                return covidTesting.methods.isHealthcareProfQualified(_this.state.licenseNum).call();\n\n              case 8:\n                isHealthcareProfQualified = _context2.sent;\n\n                _this.setState({\n                  isCivillianTested: isHealthcareProfQualified[0]\n                });\n\n                _context2.next = 15;\n                break;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](2);\n\n                _this.setState({\n                  errorMessage: _context2.t0.message\n                });\n\n              case 15:\n                _this.setState({\n                  loading: false\n                });\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[2, 12]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(CovidTesting, [{\n    key: \"renderContractOwner\",\n    // Displays the Ethereum address that\n    // owns the overall contract.\n    value: function renderContractOwner() {\n      var items = [{\n        header: 'Contract Owner Address:',\n        description: 'Ethereum address of the owner of the contract.',\n        meta: this.props.contractOwner,\n        fluid: true\n      }];\n      return __jsx(Card.Group, {\n        items: items,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 16\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }\n      }, __jsx(\"link\", {\n        rel: \"stylesheet\",\n        href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }\n      }), this.renderContractOwner(), __jsx(Form, {\n        onSubmit: this.onSubmitCivillian,\n        error: !!this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }, __jsx(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      }, __jsx(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }\n      }, \"Confirm if civllian has been tested for COVID-19\"), __jsx(Input, {\n        placeholder: \"Search civillian by government Issued ID number\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            govntId: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }\n      })), __jsx(Message, {\n        error: true,\n        header: \"Error:\",\n        content: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      }), __jsx(Button, {\n        type: \"submit\",\n        loading: this.state.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }\n      }, \"Search\"), __jsx(Message, {\n        header: \"Searched Civillian COVID Tested: \",\n        content: this.state.isCivillianTested.toString(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }\n      })), __jsx(Form, {\n        onSubmit: this.onSubmitHealthcareProf,\n        error: !!this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }\n      }, __jsx(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }\n      }, __jsx(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }\n      }, \"Confirm if healthcare professional is qualified for COVID-19 test\"), __jsx(Input, {\n        placeholder: \"Search healthcare professional by license number\",\n        onChange: function onChange(event) {\n          return _this2.setState({\n            licenseNum: event.target.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }\n      })), __jsx(Message, {\n        error: true,\n        header: \"Error:\",\n        content: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }\n      }), __jsx(Button, {\n        type: \"submit\",\n        loading: this.state.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }\n      }, \"Search\"), __jsx(Message, {\n        header: \"Searched Civillian COVID Tested: \",\n        content: this.state.isHealthcareProfQualified.toString(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }\n      })));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var contractOwner;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return covidTesting.methods.contractOwner().call();\n\n              case 2:\n                contractOwner = _context3.sent;\n                return _context3.abrupt(\"return\", {\n                  contractOwner: contractOwner\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return CovidTesting;\n}(Component);\n\n;\nexport default CovidTesting; // in <Button>: onClick={this.onClick}\n\n/*\nForm Outline:\n\nShow owner of contract.\n\nHave option to check if a civillian has been tested for COVID.\n    \n    Enter civillian government ID number to check whether they have been tested.\n\nGo to page to add a civillian after they've been tested.\n\nGo to page to add a healthcare professional who is qualified to adminsiter COVID tests.\n*/","map":{"version":3,"sources":["/Users/robertocantu/blockchain_programming/covid_testing_results/pages/index.js"],"names":["React","Component","Card","Form","Button","Input","Message","covidTesting","web3","CovidTesting","govntId","isCivillianTested","licenseNum","isHealthcareProfQualified","errorMessage","loading","event","preventDefault","setState","eth","getAccounts","accounts","methods","state","call","message","items","header","description","meta","props","contractOwner","fluid","renderContractOwner","onSubmitCivillian","target","value","toString","onSubmitHealthcareProf"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Card, Form, Button, Input, Message } from 'semantic-ui-react';\nimport covidTesting from '../back-end/covidTesting.js';\nimport web3 from '../back-end/web3.js';\n\nclass CovidTesting extends Component {\n    state = {\n        govntId: '',\n        isCivillianTested: '',\n        licenseNum: '',\n        isHealthcareProfQualified: '',\n        errorMessage: '',\n        loading: false\n    };\n\n    static async getInitialProps() {\n        const contractOwner = await covidTesting.methods.contractOwner().call();\n        \n        return { contractOwner };\n    }\n    \n    // Displays the Ethereum address that\n    // owns the overall contract.\n    renderContractOwner() {\n        const items = [{\n            header: 'Contract Owner Address:',\n            description: 'Ethereum address of the owner of the contract.',\n            meta: this.props.contractOwner,\n            fluid: true\n        }];\n\n        return <Card.Group items={items} />;\n    }\n\n    onSubmitCivillian = async (event) => {\n        // Browser from trying to\n        // submit the form\n        event.preventDefault();\n\n        this.setState({ loading: true, errorMessage: '' });\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            let isCivillianTested = await covidTesting.methods.isCivillianTested(this.state.govntId).call();\n            this.setState({ isCivillianTested: isCivillianTested[0] });\n            // console.log(this.state.isCivillianTested.toString());\n        } catch(err) {\n            this.setState({ errorMessage: err.message });\n        }\n\n        this.setState({ loading: false });\n    };\n\n    onSubmitHealthcareProf = async (event) => {\n        // Browser from trying to\n        // submit the form\n        event.preventDefault();\n\n        this.setState({ loading: true, errorMessage: '' });\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            let isHealthcareProfQualified = await covidTesting.methods.isHealthcareProfQualified(this.state.licenseNum).call();\n            this.setState({ isCivillianTested: isHealthcareProfQualified[0] });\n        } catch(err) {\n            this.setState({ errorMessage: err.message });\n        }\n\n        this.setState({ loading: false });\n    };\n\n    render() {\n        return(\n            <div>\n                <link rel='stylesheet' href='//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css' />\n                {this.renderContractOwner()}\n\n                <Form onSubmit={this.onSubmitCivillian} error={!!this.state.errorMessage} >\n                    <Form.Field>\n                        <label>Confirm if civllian has been tested for COVID-19</label>\n\n                        <Input\n                        placeholder='Search civillian by government Issued ID number'\n                        onChange={event => this.setState({ govntId: event.target.value })}\n                        />\n                    </Form.Field>\n\n                    <Message error header='Error:' content={this.state.errorMessage} />\n\n                    <Button type='submit' loading={this.state.loading}>Search</Button>\n\n                    <Message header='Searched Civillian COVID Tested: ' content={this.state.isCivillianTested.toString()} />\n                </Form>\n\n                <Form onSubmit={this.onSubmitHealthcareProf} error={!!this.state.errorMessage} >\n                    <Form.Field>\n                        <label>Confirm if healthcare professional is qualified for COVID-19 test</label>\n\n                        <Input\n                        placeholder='Search healthcare professional by license number'\n                        onChange={event => this.setState({ licenseNum: event.target.value })}\n                        />\n                    </Form.Field>\n\n                    <Message error header='Error:' content={this.state.errorMessage} />\n\n                    <Button type='submit' loading={this.state.loading}>Search</Button>\n\n                    <Message header='Searched Civillian COVID Tested: ' content={this.state.isHealthcareProfQualified.toString()} />\n                </Form>\n            </div>\n        )\n    };\n};\n\nexport default CovidTesting;\n\n// in <Button>: onClick={this.onClick}\n\n/*\nForm Outline:\n\nShow owner of contract.\n\nHave option to check if a civillian has been tested for COVID.\n    \n    Enter civillian government ID number to check whether they have been tested.\n\nGo to page to add a civillian after they've been tested.\n\nGo to page to add a healthcare professional who is qualified to adminsiter COVID tests.\n*/"]},"metadata":{},"sourceType":"module"}