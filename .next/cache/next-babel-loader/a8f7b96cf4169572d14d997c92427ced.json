{"ast":null,"code":"var _jsxFileName = \"/Users/robertocantu/blockchain_programming/covid_testing_results/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Card, Form, Button, Input, Message, Divider, Grid } from 'semantic-ui-react';\nimport covidTesting from '../back-end/covidTesting.js';\nimport web3 from '../back-end/web3.js';\n\nclass CovidTesting extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      govntId: '',\n      isCivillianTested: '',\n      civillianEthAddress: '',\n      licenseNum: '',\n      isHealthcareProfQualified: '',\n      healthcareProfEthAddress: '',\n      errorMessage: '',\n      loadingOne: false,\n      loadingTwo: false,\n      loadingThree: false,\n      loadingFour: false\n    });\n\n    _defineProperty(this, \"onSubmitCivillian\", async event => {\n      // Browser from trying to\n      // submit the form\n      event.preventDefault();\n      this.setState({\n        loadingOne: true,\n        errorMessage: ''\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        let isCivillianTested = await covidTesting.methods.isCivillianTested(this.state.govntId).call();\n        this.setState({\n          isCivillianTested: isCivillianTested[0]\n        }); // console.log(this.state.isCivillianTested.toString());\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        loadingOne: false\n      });\n    });\n\n    _defineProperty(this, \"onSubmitHealthcareProf\", async event => {\n      // Browser from trying to\n      // submit the form\n      event.preventDefault();\n      this.setState({\n        loadingTwo: true,\n        errorMessage: ''\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        let isHealthcareProfQualified = await covidTesting.methods.isHealthcareProfQualified(this.state.licenseNum).call();\n        this.setState({\n          isHealthcareProfQualified: isHealthcareProfQualified\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        loadingTwo: false\n      });\n    });\n\n    _defineProperty(this, \"onSubmitAddHealthcareProf\", async event => {\n      // Browser from trying to\n      // submit the form\n      event.preventDefault();\n      this.setState({\n        loadingThree: true,\n        errorMessage: ''\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        await covidTesting.methods.addHealthcareProfessional(this.state.healthcareProfEthAddress, this.state.licenseNum).send({\n          from: accounts[0]\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        loadingThree: false\n      });\n    });\n\n    _defineProperty(this, \"onSubmitaddTestedCivillian\", async event => {\n      // Browser from trying to\n      // submit the form\n      event.preventDefault();\n      this.setState({\n        loadingFour: true,\n        errorMessage: ''\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        console.log(accounts);\n        await covidTesting.methods.addTestedCivillian(this.state.govntId, this.state.licenseNum, this.state.civillianEthAddress).send({\n          from: accounts[0]\n        });\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        loadingFour: false\n      });\n    });\n  }\n\n  static async getInitialProps() {\n    const contractOwner = await covidTesting.methods.contractOwner().call();\n    return {\n      contractOwner\n    };\n  }\n\n  // Displays the Ethereum address that\n  // owns the overall contract.\n  renderContractOwner() {\n    const items = [{\n      header: 'Contract Owner Address:',\n      description: 'Ethereum address of the owner of the contract.',\n      meta: this.props.contractOwner,\n      fluid: true\n    }];\n    return __jsx(Card.Group, {\n      items: items,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 16\n      }\n    });\n  }\n\n  renderForms() {\n    const items = [{\n      header: __jsx(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }\n      }, \"Confirm if civllian has been tested for COVID-19\"),\n      description: __jsx(Form, {\n        onSubmit: this.onSubmitCivillian,\n        error: !!this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }\n      }, __jsx(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }\n      }, __jsx(Input, {\n        placeholder: \"Search civillian by government Issued ID number\",\n        onChange: event => this.setState({\n          govntId: event.target.value\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 29\n        }\n      })), __jsx(Message, {\n        error: true,\n        header: \"Error:\",\n        content: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }\n      }), __jsx(Button, {\n        type: \"submit\",\n        loading: this.state.loadingOne,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }\n      }, \"Search\"), __jsx(Message, {\n        header: \"Searched Civillian COVID Tested: \",\n        content: this.state.isCivillianTested.toString(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }\n      }))\n    }, {\n      header: __jsx(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }\n      }, \"Confirm if healthcare professional is qualified for COVID-19 test\"),\n      description: __jsx(Form, {\n        onSubmit: this.onSubmitHealthcareProf,\n        error: !!this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }\n      }, __jsx(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }\n      }, __jsx(Input, {\n        placeholder: \"Search healthcare professional by license number\",\n        onChange: event => this.setState({\n          licenseNum: event.target.value\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 29\n        }\n      })), __jsx(Message, {\n        error: true,\n        header: \"Error:\",\n        content: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }\n      }), __jsx(Button, {\n        type: \"submit\",\n        loading: this.state.loadingTwo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }\n      }, \"Search\"), __jsx(Message, {\n        header: \"Searched Healthcare Professional Qualification: \",\n        content: this.state.isHealthcareProfQualified.toString(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }\n      }))\n    }, {\n      header: __jsx(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }\n      }, \"Add a healthcare professional to be qualified to administer COVID-19 tests\"),\n      description: __jsx(Form, {\n        onSubmit: this.onSubmitAddHealthcareProf,\n        error: !!this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }\n      }, __jsx(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 25\n        }\n      }, __jsx(Input, {\n        placeholder: \"Add healthcare professional Ethereum address\",\n        onChange: event => this.setState({\n          healthcareProfEthAddress: event.target.value\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 29\n        }\n      }), __jsx(Input, {\n        placeholder: \"Add healthcare professional license number\",\n        onChange: event => this.setState({\n          licenseNum: event.target.value\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 29\n        }\n      })), __jsx(Message, {\n        error: true,\n        header: \"Error:\",\n        content: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }\n      }), __jsx(Button, {\n        type: \"submit\",\n        loading: this.state.loadingThree,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }\n      }, \"Add\"))\n    }, {\n      header: __jsx(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }\n      }, \"Add a civillian that has had the COVID-19 test\"),\n      description: __jsx(Form, {\n        onSubmit: this.onSubmitaddTestedCivillian,\n        error: !!this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }\n      }, __jsx(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }\n      }, __jsx(Input, {\n        placeholder: \"Add civillian by government Issued ID number\",\n        onChange: event => this.setState({\n          govntId: event.target.value\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 29\n        }\n      }), __jsx(Input, {\n        placeholder: \"Add license number of healthcare professional administering test\",\n        onChange: event => this.setState({\n          licenseNum: event.target.value\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 29\n        }\n      }), __jsx(Input, {\n        placeholder: \"Add civillian Ethereum address\",\n        onChange: event => this.setState({\n          civillianEthAddress: event.target.value\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 29\n        }\n      })), __jsx(Message, {\n        error: true,\n        header: \"Error:\",\n        content: this.state.errorMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }\n      }), __jsx(Button, {\n        type: \"submit\",\n        loading: this.state.loadingFour,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }\n      }, \"Add\"))\n    }];\n    return __jsx(Card.Group, {\n      itemsPerRow: \"2\",\n      items: items,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 16\n      }\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }, __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }\n    }), __jsx(Grid, {\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }, __jsx(Grid.Column, {\n      centered: true,\n      width: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }\n    }, this.renderContractOwner())), __jsx(Grid, {\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }\n    }, __jsx(Grid.Column, {\n      width: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }\n    }, this.renderForms())));\n  }\n\n}\n\n;\nexport default CovidTesting;","map":{"version":3,"sources":["/Users/robertocantu/blockchain_programming/covid_testing_results/pages/index.js"],"names":["React","Component","Card","Form","Button","Input","Message","Divider","Grid","covidTesting","web3","CovidTesting","govntId","isCivillianTested","civillianEthAddress","licenseNum","isHealthcareProfQualified","healthcareProfEthAddress","errorMessage","loadingOne","loadingTwo","loadingThree","loadingFour","event","preventDefault","setState","accounts","eth","getAccounts","methods","state","call","err","message","addHealthcareProfessional","send","from","console","log","addTestedCivillian","getInitialProps","contractOwner","renderContractOwner","items","header","description","meta","props","fluid","renderForms","onSubmitCivillian","target","value","toString","onSubmitHealthcareProf","onSubmitAddHealthcareProf","onSubmitaddTestedCivillian","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Card, Form, Button, Input, Message, Divider, Grid } from 'semantic-ui-react';\nimport covidTesting from '../back-end/covidTesting.js';\nimport web3 from '../back-end/web3.js';\n\nclass CovidTesting extends Component {\n    state = {\n        govntId: '',\n        isCivillianTested: '',\n        civillianEthAddress: '',\n        licenseNum: '',\n        isHealthcareProfQualified: '',\n        healthcareProfEthAddress: '',\n        errorMessage: '',\n        loadingOne: false,\n        loadingTwo: false,\n        loadingThree: false,\n        loadingFour: false\n    };\n\n    static async getInitialProps() {\n        const contractOwner = await covidTesting.methods.contractOwner().call();\n        \n        return { contractOwner };\n    };\n    \n    // Displays the Ethereum address that\n    // owns the overall contract.\n    renderContractOwner() {\n        const items = [{\n            header: 'Contract Owner Address:',\n            description: 'Ethereum address of the owner of the contract.',\n            meta: this.props.contractOwner,\n            fluid: true\n        }];\n\n        return <Card.Group items={items} />;\n    };\n\n    onSubmitCivillian = async (event) => {\n        // Browser from trying to\n        // submit the form\n        event.preventDefault();\n\n        this.setState({ loadingOne: true, errorMessage: '' });\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            let isCivillianTested = await covidTesting.methods.isCivillianTested(this.state.govntId).call();\n            this.setState({ isCivillianTested: isCivillianTested[0] });\n            // console.log(this.state.isCivillianTested.toString());\n        } catch(err) {\n            this.setState({ errorMessage: err.message });\n        }\n\n        this.setState({ loadingOne: false });\n    };\n\n    onSubmitHealthcareProf = async (event) => {\n        // Browser from trying to\n        // submit the form\n        event.preventDefault();\n\n        this.setState({ loadingTwo: true, errorMessage: '' });\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            let isHealthcareProfQualified = await covidTesting.methods.isHealthcareProfQualified(this.state.licenseNum).call();\n            this.setState({ isHealthcareProfQualified: isHealthcareProfQualified });\n        } catch(err) {\n            this.setState({ errorMessage: err.message });\n        }\n\n        this.setState({ loadingTwo: false });\n    };\n\n    onSubmitAddHealthcareProf = async (event) => {\n        // Browser from trying to\n        // submit the form\n        event.preventDefault();\n\n        this.setState({ loadingThree: true, errorMessage: '' });\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            await covidTesting.methods.addHealthcareProfessional(this.state.healthcareProfEthAddress, this.state.licenseNum).send({ from: accounts[0] });\n        } catch(err) {\n            this.setState({ errorMessage: err.message });\n        }\n\n        this.setState({ loadingThree: false });\n    };\n\n    onSubmitaddTestedCivillian = async (event) => {\n        // Browser from trying to\n        // submit the form\n        event.preventDefault();\n\n        this.setState({ loadingFour: true, errorMessage: '' });\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            console.log(accounts);\n            await covidTesting.methods.addTestedCivillian(this.state.govntId, this.state.licenseNum, this.state.civillianEthAddress).send({ from: accounts[0] });\n        } catch(err) {\n            this.setState({ errorMessage: err.message });\n        }\n\n        this.setState({ loadingFour: false });\n    };\n\n    renderForms() {\n        const items = [\n            {\n                header: <h3>Confirm if civllian has been tested for COVID-19</h3>,\n                description: (\n                    <Form onSubmit={this.onSubmitCivillian} error={!!this.state.errorMessage} >\n                        <Form.Field>\n                            <Input\n                            placeholder='Search civillian by government Issued ID number'\n                            onChange={event => this.setState({ govntId: event.target.value })}\n                            />\n                        </Form.Field>\n\n                        <Message error header='Error:' content={this.state.errorMessage} />\n\n                        <Button type='submit' loading={this.state.loadingOne}>Search</Button>\n\n                        <Message header='Searched Civillian COVID Tested: ' content={this.state.isCivillianTested.toString()} />\n                    </Form>\n                )\n            },\n            {\n                header: <h3>Confirm if healthcare professional is qualified for COVID-19 test</h3>,\n                description: (\n                    <Form onSubmit={this.onSubmitHealthcareProf} error={!!this.state.errorMessage} >\n                        <Form.Field>\n                            <Input\n                            placeholder='Search healthcare professional by license number'\n                            onChange={event => this.setState({ licenseNum: event.target.value })}\n                            />\n                        </Form.Field>\n\n                        <Message error header='Error:' content={this.state.errorMessage} />\n\n                        <Button type='submit' loading={this.state.loadingTwo}>Search</Button>\n\n                        <Message header='Searched Healthcare Professional Qualification: ' content={this.state.isHealthcareProfQualified.toString()} />\n                    </Form>\n                )\n            },\n            {\n                header: <h3>Add a healthcare professional to be qualified to administer COVID-19 tests</h3>,\n                description: (\n                    <Form onSubmit={this.onSubmitAddHealthcareProf} error={!!this.state.errorMessage} >\n                        <Form.Field>\n                            <Input\n                            placeholder='Add healthcare professional Ethereum address'\n                            onChange={event => this.setState({ healthcareProfEthAddress: event.target.value })}\n                            />\n\n                            <Input\n                            placeholder='Add healthcare professional license number'\n                            onChange={event => this.setState({ licenseNum: event.target.value })}\n                            />\n                        </Form.Field>\n\n                        <Message error header='Error:' content={this.state.errorMessage} />\n\n                        <Button type='submit' loading={this.state.loadingThree}>Add</Button>\n                    </Form>\n                )\n            },\n            {\n                header: <h3>Add a civillian that has had the COVID-19 test</h3>,\n                description: (\n                    <Form onSubmit={this.onSubmitaddTestedCivillian} error={!!this.state.errorMessage} >\n                        <Form.Field>\n                            <Input\n                            placeholder='Add civillian by government Issued ID number'\n                            onChange={event => this.setState({ govntId: event.target.value })}\n                            />\n\n                            <Input\n                            placeholder='Add license number of healthcare professional administering test'\n                            onChange={event => this.setState({ licenseNum: event.target.value })}\n                            />\n\n                            <Input\n                            placeholder='Add civillian Ethereum address'\n                            onChange={event => this.setState({ civillianEthAddress: event.target.value })}\n                            />\n                        </Form.Field>\n\n                        <Message error header='Error:' content={this.state.errorMessage} />\n\n                        <Button type='submit' loading={this.state.loadingFour}>Add</Button>\n                    </Form>\n                )\n            }\n        ];\n\n        return <Card.Group itemsPerRow='2' items={items} />;\n    };\n\n    render() {\n        return(\n            <div>\n                <link rel='stylesheet' href='//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css' />\n                <Grid centered >\n                    <Grid.Column centered width='12'>\n                        {this.renderContractOwner()}\n                    </Grid.Column>\n                </Grid>\n\n                <Grid centered >\n                    <Grid.Column width='12'>\n                        {this.renderForms()}\n                    </Grid.Column>\n                </Grid>\n            </div>\n        )\n    };\n};\n\nexport default CovidTesting;"]},"metadata":{},"sourceType":"module"}