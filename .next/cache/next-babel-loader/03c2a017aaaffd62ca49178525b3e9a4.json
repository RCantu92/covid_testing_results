{"ast":null,"code":"var _jsxFileName = \"/Users/robertocantu/blockchain_programming/covid_testing_results/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Card, Form, Button, Input, Message } from 'semantic-ui-react';\nimport covidTesting from '../back-end/covidTesting.js';\nimport web3 from '../back-end/web3.js';\n\nclass CovidTesting extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      govntId: '',\n      isCivillianTested: '',\n      licenseNum: '',\n      isHealthcareProfQualified: '',\n      errorMessage: '',\n      loading: false\n    });\n\n    _defineProperty(this, \"onSubmitCivillian\", async event => {\n      // Browser from trying to\n      // submit the form\n      event.preventDefault();\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        let isCivillianTested = await covidTesting.methods.isCivillianTested(this.state.govntId).call();\n        this.setState({\n          isCivillianTested: isCivillianTested[0]\n        }); // console.log(this.state.isCivillianTested.toString());\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"onSubmitHealthcareProf\", async event => {\n      // Browser from trying to\n      // submit the form\n      event.preventDefault();\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      });\n\n      try {\n        console.log('1');\n        const accounts = await web3.eth.getAccounts();\n        console.log('2');\n        let isHealthcareProfQualified = await covidTesting.methods.isHealthcareProfQualified(this.state.licenseNum).call();\n        console.log('3');\n        this.setState({\n          isHealthcareProfQualified: isHealthcareProfQualified[0]\n        });\n        console.log('4');\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  static async getInitialProps() {\n    const contractOwner = await covidTesting.methods.contractOwner().call();\n    return {\n      contractOwner\n    };\n  } // Displays the Ethereum address that\n  // owns the overall contract.\n\n\n  renderContractOwner() {\n    const items = [{\n      header: 'Contract Owner Address:',\n      description: 'Ethereum address of the owner of the contract.',\n      meta: this.props.contractOwner,\n      fluid: true\n    }];\n    return __jsx(Card.Group, {\n      items: items,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 16\n      }\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }), this.renderContractOwner(), __jsx(Form, {\n      onSubmit: this.onSubmitCivillian,\n      error: !!this.state.errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }\n    }, \"Confirm if civllian has been tested for COVID-19\"), __jsx(Input, {\n      placeholder: \"Search civillian by government Issued ID number\",\n      onChange: event => this.setState({\n        govntId: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }\n    })), __jsx(Message, {\n      error: true,\n      header: \"Error:\",\n      content: this.state.errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }), __jsx(Button, {\n      type: \"submit\",\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, \"Search\"), __jsx(Message, {\n      header: \"Searched Civillian COVID Tested: \",\n      content: this.state.isCivillianTested.toString(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    })), __jsx(Form, {\n      onSubmit: this.onSubmitHealthcareProf,\n      error: !!this.state.errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }, __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    }, \"Confirm if healthcare professional is qualified for COVID-19 test\"), __jsx(Input, {\n      placeholder: \"Search healthcare professional by license number\",\n      onChange: event => this.setState({\n        licenseNum: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    })), __jsx(Message, {\n      error: true,\n      header: \"Error:\",\n      content: this.state.errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }), __jsx(Button, {\n      type: \"submit\",\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, \"Search\"), __jsx(Message, {\n      header: \"Searched Healthcare Professional Qualification: \",\n      content: this.state.isHealthcareProfQualified.toString(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\n;\nexport default CovidTesting; // in <Button>: onClick={this.onClick}\n\n/*\nForm Outline:\n\nShow owner of contract.\n\nHave option to check if a civillian has been tested for COVID.\n    \n    Enter civillian government ID number to check whether they have been tested.\n\nGo to page to add a civillian after they've been tested.\n\nGo to page to add a healthcare professional who is qualified to adminsiter COVID tests.\n*/","map":{"version":3,"sources":["/Users/robertocantu/blockchain_programming/covid_testing_results/pages/index.js"],"names":["React","Component","Card","Form","Button","Input","Message","covidTesting","web3","CovidTesting","govntId","isCivillianTested","licenseNum","isHealthcareProfQualified","errorMessage","loading","event","preventDefault","setState","accounts","eth","getAccounts","methods","state","call","err","message","console","log","getInitialProps","contractOwner","renderContractOwner","items","header","description","meta","props","fluid","render","onSubmitCivillian","target","value","toString","onSubmitHealthcareProf"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Card, Form, Button, Input, Message } from 'semantic-ui-react';\nimport covidTesting from '../back-end/covidTesting.js';\nimport web3 from '../back-end/web3.js';\n\nclass CovidTesting extends Component {\n    state = {\n        govntId: '',\n        isCivillianTested: '',\n        licenseNum: '',\n        isHealthcareProfQualified: '',\n        errorMessage: '',\n        loading: false\n    };\n\n    static async getInitialProps() {\n        const contractOwner = await covidTesting.methods.contractOwner().call();\n        \n        return { contractOwner };\n    }\n    \n    // Displays the Ethereum address that\n    // owns the overall contract.\n    renderContractOwner() {\n        const items = [{\n            header: 'Contract Owner Address:',\n            description: 'Ethereum address of the owner of the contract.',\n            meta: this.props.contractOwner,\n            fluid: true\n        }];\n\n        return <Card.Group items={items} />;\n    }\n\n    onSubmitCivillian = async (event) => {\n        // Browser from trying to\n        // submit the form\n        event.preventDefault();\n\n        this.setState({ loading: true, errorMessage: '' });\n\n        try {\n            const accounts = await web3.eth.getAccounts();\n            let isCivillianTested = await covidTesting.methods.isCivillianTested(this.state.govntId).call();\n            this.setState({ isCivillianTested: isCivillianTested[0] });\n            // console.log(this.state.isCivillianTested.toString());\n        } catch(err) {\n            this.setState({ errorMessage: err.message });\n        }\n\n        this.setState({ loading: false });\n    };\n\n    onSubmitHealthcareProf = async (event) => {\n        // Browser from trying to\n        // submit the form\n        event.preventDefault();\n\n        this.setState({ loading: true, errorMessage: '' });\n\n        try {\n            console.log('1');\n            const accounts = await web3.eth.getAccounts();\n            console.log('2');\n            let isHealthcareProfQualified = await covidTesting.methods.isHealthcareProfQualified(this.state.licenseNum).call();\n            console.log('3');\n            this.setState({ isHealthcareProfQualified: isHealthcareProfQualified[0] });\n            console.log('4');\n        } catch(err) {\n            this.setState({ errorMessage: err.message });\n        }\n\n        this.setState({ loading: false });\n    };\n\n    render() {\n        return(\n            <div>\n                <link rel='stylesheet' href='//cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css' />\n                {this.renderContractOwner()}\n\n                <Form onSubmit={this.onSubmitCivillian} error={!!this.state.errorMessage} >\n                    <Form.Field>\n                        <label>Confirm if civllian has been tested for COVID-19</label>\n\n                        <Input\n                        placeholder='Search civillian by government Issued ID number'\n                        onChange={event => this.setState({ govntId: event.target.value })}\n                        />\n                    </Form.Field>\n\n                    <Message error header='Error:' content={this.state.errorMessage} />\n\n                    <Button type='submit' loading={this.state.loading}>Search</Button>\n\n                    <Message header='Searched Civillian COVID Tested: ' content={this.state.isCivillianTested.toString()} />\n                </Form>\n\n                <Form onSubmit={this.onSubmitHealthcareProf} error={!!this.state.errorMessage} >\n                    <Form.Field>\n                        <label>Confirm if healthcare professional is qualified for COVID-19 test</label>\n\n                        <Input\n                        placeholder='Search healthcare professional by license number'\n                        onChange={event => this.setState({ licenseNum: event.target.value })}\n                        />\n                    </Form.Field>\n\n                    <Message error header='Error:' content={this.state.errorMessage} />\n\n                    <Button type='submit' loading={this.state.loading}>Search</Button>\n\n                    <Message header='Searched Healthcare Professional Qualification: ' content={this.state.isHealthcareProfQualified.toString()} />\n                </Form>\n            </div>\n        )\n    };\n};\n\nexport default CovidTesting;\n\n// in <Button>: onClick={this.onClick}\n\n/*\nForm Outline:\n\nShow owner of contract.\n\nHave option to check if a civillian has been tested for COVID.\n    \n    Enter civillian government ID number to check whether they have been tested.\n\nGo to page to add a civillian after they've been tested.\n\nGo to page to add a healthcare professional who is qualified to adminsiter COVID tests.\n*/"]},"metadata":{},"sourceType":"module"}